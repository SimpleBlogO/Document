swagger: "2.0"
info:
  description: "This is a simple blog server."
  version: "1.0.0"
  title: "simple blog"
host: "127.0.0.1"
basePath: "/v1"
tags:
- name: "user"
  description: "Operations about user"
schemes:
- "https"
- "http"
paths:
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "successful operation"
        400:
          description: "username/email/phone has been used"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched."
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
  /article/{username}:
    get:
      tags:
      - "article"
      summary: "Get all user's articles by user name"
      description: ""
      operationId: "getUserArticleByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The author's name that needs to be fetched."
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Article"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
  /article/{username}/{id}:
    get:
      tags:
      - "article"
      summary: "Get the user's article by user name and article ID"
      description: ""
      operationId: "getUserArticleByNameAndID"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The author's name that needs to be fetched."
        required: true
        type: "string"
      - name: "id"
        in: "path"
        description: "ID of article that needs to be fetched."
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Article"
        400:
          description: "Invalid username or ID supplied"
        404:
          description: "Article not found"
  /review/{username}/{id}:
    get:
      tags:
      - "review"
      summary: "Get the reviews of the user's article by user name and article ID"
      description: ""
      operationId: "getReviewByNameAndID"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The author's name that needs to be fetched."
        required: true
        type: "string"
      - name: "id"
        in: "path"
        description: "ID of article that needs to be fetched."
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Review"
        400:
          description: "Invalid username or ID supplied"
        404:
          description: "Article not found"
  /column/{username}:
    get:
      tags:
      - "column"
      summary: "Get the columns of the userby user name"
      description: ""
      operationId: "getColumnByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The user's name that needs to be fetched."
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Column"
        400:
          description: "Invalid username"
        404:
          description: "User not found"
definitions:
  User:
    type: "object"
    properties:
      username:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Article:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      title:
        type: "string"
      author: #username of author
        type: "string"
      content:
        type: "string"
    xml:
      name: "Article"
  Comment:
    type: "object"
    properties:
      content:
        type: "string"
      number:
        type: "integer"
    xml:
      name: "Comment"
  Review:
    type: "object"
    properties:
      author: 
        type: "string"
      id:
        type: "integer"
        format: "int32"
      comments:
        type: "array"
        xml:
          name: "comment"
          wrapped: true
        items:
          $ref: "#/definitions/Comment"
    xml:
      name: "Review"
  Column:
    type: "object"
    properties:
      username:
        type: "string"
      columnName:
        type: "array"
        items:
          type: "string"
    xml:
      name: "Column"